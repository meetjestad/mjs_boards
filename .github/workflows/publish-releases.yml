name: Publish tagged releases to JSON file
on: [push]
env:
  JSON_BRANCH: master-test
  JSON_FILENAME: package_meetjestad.net_index.json
  TEMPLATE_FILENAME: .github/workflows/platform_template.json
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        ref: ${{env.JSON_BRANCH}}

    - name: Extract version number from tag
      run: |
        # Transform refs/tags/name-v1.2.3 to just 1.2.3
        VERSION=${GITHUB_REF#refs/tags/*-v}
        if [ "$VERSION" = "$GITHUB_REF" ]; then
          # If unchanged, the tag did not match
          echo "Tag $GITHUB_REF did not match expected format"
          exit 1
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Generate URL & Checksum
      run: |
        # GITHUB_REF is refs/tags/tagname, so remove the prefix
        TAG="${GITHUB_REF#refs/tags/}"
        # GITHUB_REPOSITORY is owner/repo, so remove the owner part
        REPO="${GITHUB_REPOSITORY#*/}"
        # Url to tarball autogenerated by github for tags
        URL="https://github.com/$GITHUB_REPOSITORY/archive/$TAG.tar.gz"

        # This uses git archive to create the same tarball that github
        # will create on downloads. Note that this does not need the tag
        # to be checked out.
	ARCHIVE_FILE="$TAG.tar.gz"
        git archive --prefix "$REPO-$TAG/" "$TAG" -o "$ARCHIVE_FILE"

        echo "TAG=$TAG" >> $GITHUB_ENV
        echo "URL=$URL" >> $GITHUB_ENV
        echo "FILE=$FILE" >> $GITHUB_ENV

    - name: Generate & commit json file
      run: |
	SHA256=$(shasum -a 256 "$ARCHIVE_FILE")
	SIZE=$(stat -c "%s" "$ARCHIVE_FILE")

        # Do a HEAD request on the URL to check that it is valid
        if ! curl -I --location --fail "$URL"; then
          echo "Download URL is invalid"
          exit 1
        fi

	PLATFORM_VERSION=$( \
          git show "$TAG:$TEMPLATE_FILENAME" \
          | sed '/^#/d'
          | jq
            --arg version "$VERSION" \
            --arg size "$SIZE" \
            --arg checksum "SHA-256:$SHA256" \
            --arg url "$URL" \
	    --arg archiveFileName "$ARCHIVE_FILE" \
	   '.version = $version | .size = $size | .checksum = $checksum | .url = $url | .archiveFileName = $archiveFileName' \
        )

        # This uses git show rather than plain cat, so we can overwrite
        # the file in the working copy directly (cat would then start
        # reading the truncated file).
        git show "$JSON_FILENAME" \
        | jq --argjson p "$PLATFORM_VERSION" \
           '.packages[0].platforms += [$p]' \
            > "$JSON_FILENAME"
