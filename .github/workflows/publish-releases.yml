# This workflow handles tagged releases.
#
# Whenever a tag is pushed, this adds an entry to the package index json
# file (which lives in another branch of the same repo), pointing to the
# automatically generated github download URL for the tag.
# This means that when you push a tag, it will be automatically
# published and installable through the boards manager in the Arduino
# IDE (when the url to the JSON file has been configured).
#
# The data added to the JSON is defined by a template file in this
# repository. Some fields, like download url and checksum are filled in
# automatically.
name: Release Workflow
on:
  push:
    tags:
    - '*'
env:
  # Path to platform.txt (within the tagged commit) to load version from
  PLATFORM_FILENAME: platform.txt
  # Path to template (within the tagged commit) to generate output from
  TEMPLATE_FILENAME: .github/workflows/platform_template.json
  # The branch (of this repository) where the output json file lives
  OUTPUT_BRANCH: master
  # Path to the index json file (within the output branch) to add output to
  OUTPUT_FILENAME: package_meetjestad.net_index.json
  # Index of the package to modify inside the output file
  PACKAGE_INDEX: 0
  # Checkout in a subdirectory, so any generate tarballs are not cleaned
  # when we use the checkout action to switch to the output branch
  CHECKOUT_DIR: checkout
  # Name to use for the commit (email is set by GH automatically)
  COMMIT_NAME: Github Actions

jobs:
  publish:
    name: Publish tag to JSON file
    runs-on: ubuntu-latest
    steps:
    - name: Checkout tag
      uses: actions/checkout@v2
      with:
        path: ${{env.CHECKOUT_DIR}}

    - name: Generate URL & tarball
      working-directory: ${{env.CHECKOUT_DIR}}
      run: |
        # GITHUB_REF is refs/tags/tagname, so remove the prefix
        TAG="${GITHUB_REF#refs/tags/}"
        # GITHUB_REPOSITORY is owner/repo, so remove the owner part
        REPO="${GITHUB_REPOSITORY#*/}"
        # Url to tarball autogenerated by github for tags
        URL="https://github.com/$GITHUB_REPOSITORY/archive/$TAG.tar.gz"

        # Put the archive file *outside* the checkout, otherwise
        # switching to another branch with the checkout action
        # overwrites it
        ARCHIVE_FILE="../$REPO-$TAG.tar.gz"

        # This uses git archive to create the same tarball that github
        # will create on downloads. Note that this works on the git
        # commit, not the checkout.
        git archive --prefix "$REPO-$TAG/" "$TAG" -o "$ARCHIVE_FILE"

        echo "URL=$URL" >> $GITHUB_ENV
        echo "ARCHIVE_FILE=$ARCHIVE_FILE" >> $GITHUB_ENV

    - name: Checkout output branch
      uses: actions/checkout@v2
      with:
        path: ${{env.CHECKOUT_DIR}}
        ref: ${{env.OUTPUT_BRANCH}}

    - name: Generate & commit json file
      working-directory: ${{env.CHECKOUT_DIR}}
      run: |
        # Redirect stderr to stdout, to make sure that all output stays
        # in the right order (especially wrt to output groups)
        exec 2>&1

        # GITHUB_REF is refs/tags/tagname, so remove the prefix
        TAG="${GITHUB_REF#refs/tags/}"

        echo "::group::Getting file checksum and size"
          SHA256=$(sha256sum "$ARCHIVE_FILE" | cut -d ' ' -f 1)
          SIZE=$(stat -c "%s" "$ARCHIVE_FILE")
          echo "$ARCHIVE_FILE:"
          echo "  checksum: $SHA256"
          echo "  size: $SIZE"
        echo "::endgroup::"

        echo "::group::Checking URL is valid"
          if ! wget --method HEAD "$URL"; then
            echo "::error::Download URL is invalid, bailing out"
            exit 1
          fi
        echo "::endgroup::"

        echo "::group::Finding platform version"
          # Extract the version number from platform.txt
          VERSION=$( \
            git show "$TAG:$PLATFORM_FILENAME" \
            | grep '^version=' | sed 's/^version=//' \
          )

          if [ -z "$VERSION" ]; then
            echo "::error::Failed to find version in $PLATFORM_FILENAME, bailing out"
            exit 1
          fi

          echo "Version: $VERSION"

          # Sanity check: The tag must end with the version number (if
          # not, maybe platform.txt was forgotten to be updated. This
          # tries to not assume too much about the exact tag format.
          if [[ "$TAG" != *"$VERSION" ]]; then
            echo "::error::Tag ($TAG) does not end with version number ($VERSION), bailing out"
            exit 1
          fi
        echo "::endgroup::"

        echo "::group::Generating platform version JSON"
        # Take the template from inside the tag, and add some
          # autogenerated values to it.
          PLATFORM_VERSION_JSON=$( \
            git show "$TAG:$TEMPLATE_FILENAME" \
            | sed '/^#/d' \
            | jq \
              --arg version "$VERSION" \
              --arg size "$SIZE" \
              --arg checksum "SHA-256:$SHA256" \
              --arg url "$URL" \
              --arg archiveFileName "$(basename $ARCHIVE_FILE)" \
             '.version = $version | .size = $size | .checksum = $checksum | .url = $url | .archiveFileName = $archiveFileName' \
          )

          echo "Generated:"
          echo "$PLATFORM_VERSION_JSON"
        echo "::endgroup::"

        echo "::group::Adding platform version to full JSON"
          # Check if the version does not already exists and bail out if
          # it does. We could replace the existing version automatically,
          # but better to let the user sort this out (they can always
          # manually remove the offending version and re-run this job to
          # add it anyway).
          if jq --exit-status --argjson p "$PLATFORM_VERSION_JSON" \
                --argjson idx "$PACKAGE_INDEX" \
                'any(.packages[$idx].platforms[]; .architecture == $p.architecture and .version == $p.version)' \
                "$OUTPUT_FILENAME" > /dev/null; then
            echo "::error::Version $VERSION already exists (for this architecture), bailing out"
            exit 1
          fi

          # Then, take the completed template and add it to the list of
          # platform releases in the json file.
          jq --argjson p "$PLATFORM_VERSION_JSON" \
             --argjson idx "$PACKAGE_INDEX" \
             '.packages[$idx].platforms += [$p]' \
             "$OUTPUT_FILENAME" \
              > tmp.json
          mv tmp.json "$OUTPUT_FILENAME"

          echo "Generated:"
          cat "$OUTPUT_FILENAME"
        echo "::endgroup::"

        echo "::group::Committing full JSON"
          git config user.name "$COMMIT_NAME"
          git commit -a -m "Add $TAG release"
          git push
        echo "::endgroup::"
